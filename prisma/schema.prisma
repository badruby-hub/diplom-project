// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int             @id @default(autoincrement())
  title         String
  //Использую тип Float позволяет хранить дробные значения, вдруг дробные числа хранить буду  :) 
  price         Float
  description   String
  badge         Boolean         @default(false)
  images        String
  categories    Category[]
  productParams ProductParams[]
}

model Category {
  id        Int      @id @default(autoincrement())
  category  String
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model ProductParams {
  id        Int      @id @default(autoincrement())
  article   String
  gender    String
  color     String
  sizes     Size[]
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Size {
  id              Int            @id @default(autoincrement())
  s               String
  m               String
  l               String
  xl              String
  xxl             String
  productParams   ProductParams? @relation(fields: [productParamsId], references: [id])
  productParamsId Int?
}

//cart

model Cart {
  id     Int     @id @default(autoincrement())
  title  String
  price  Float
  badge  Boolean @default(false)
  images String
  color  String
}


//-------------------------------- auth 

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}